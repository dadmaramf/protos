// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: frequency_service/frequency_service.proto

package frequency_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ConnectService_NewConnect_FullMethodName = "/rand.ConnectService/NewConnect"
)

// ConnectServiceClient is the client API for ConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectServiceClient interface {
	NewConnect(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (ConnectService_NewConnectClient, error)
}

type connectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectServiceClient(cc grpc.ClientConnInterface) ConnectServiceClient {
	return &connectServiceClient{cc}
}

func (c *connectServiceClient) NewConnect(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (ConnectService_NewConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConnectService_ServiceDesc.Streams[0], ConnectService_NewConnect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &connectServiceNewConnectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConnectService_NewConnectClient interface {
	Recv() (*Frequency, error)
	grpc.ClientStream
}

type connectServiceNewConnectClient struct {
	grpc.ClientStream
}

func (x *connectServiceNewConnectClient) Recv() (*Frequency, error) {
	m := new(Frequency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectServiceServer is the server API for ConnectService service.
// All implementations must embed UnimplementedConnectServiceServer
// for forward compatibility
type ConnectServiceServer interface {
	NewConnect(*FrequencyRequest, ConnectService_NewConnectServer) error
	mustEmbedUnimplementedConnectServiceServer()
}

// UnimplementedConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServiceServer struct {
}

func (UnimplementedConnectServiceServer) NewConnect(*FrequencyRequest, ConnectService_NewConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method NewConnect not implemented")
}
func (UnimplementedConnectServiceServer) mustEmbedUnimplementedConnectServiceServer() {}

// UnsafeConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServiceServer will
// result in compilation errors.
type UnsafeConnectServiceServer interface {
	mustEmbedUnimplementedConnectServiceServer()
}

func RegisterConnectServiceServer(s grpc.ServiceRegistrar, srv ConnectServiceServer) {
	s.RegisterService(&ConnectService_ServiceDesc, srv)
}

func _ConnectService_NewConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FrequencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectServiceServer).NewConnect(m, &connectServiceNewConnectServer{ServerStream: stream})
}

type ConnectService_NewConnectServer interface {
	Send(*Frequency) error
	grpc.ServerStream
}

type connectServiceNewConnectServer struct {
	grpc.ServerStream
}

func (x *connectServiceNewConnectServer) Send(m *Frequency) error {
	return x.ServerStream.SendMsg(m)
}

// ConnectService_ServiceDesc is the grpc.ServiceDesc for ConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rand.ConnectService",
	HandlerType: (*ConnectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewConnect",
			Handler:       _ConnectService_NewConnect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "frequency_service/frequency_service.proto",
}
